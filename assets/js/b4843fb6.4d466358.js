"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4646],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>g});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return t?n.createElement(g,o(o({ref:r},c),{},{components:t})):n.createElement(g,o({ref:r},c))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9147:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=t(7462),a=(t(7294),t(3905));const i={id:"try-catch-rescue",title:"Errors Handling",tags:["til","elixir","programming language"]},o=void 0,l={unversionedId:"til/elixir/try-catch-rescue",id:"til/elixir/try-catch-rescue",title:"Errors Handling",description:"There are two styles of software engineering to deal with error:",source:"@site/docs/til/elixir/try-catch-rescue.mdx",sourceDirName:"til/elixir",slug:"/til/elixir/try-catch-rescue",permalink:"/docs/til/elixir/try-catch-rescue",draft:!1,tags:[{label:"til",permalink:"/docs/tags/til"},{label:"elixir",permalink:"/docs/tags/elixir"},{label:"programming language",permalink:"/docs/tags/programming-language"}],version:"current",frontMatter:{id:"try-catch-rescue",title:"Errors Handling",tags:["til","elixir","programming language"]},sidebar:"tutorialSidebar",previous:{title:"Elixir",permalink:"/docs/category/elixir"},next:{title:"Joe Armstrong on Programmer Productivity",permalink:"/docs/til/misc/productivity"}},s={},p=[{value:"try, catch and rescue",id:"try-catch-and-rescue",level:2},{value:"Errors",id:"errors",level:3},{value:"References",id:"references",level:2}],c={toc:p},u="wrapper";function m(e){let{components:r,...t}=e;return(0,a.kt)(u,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are two styles of software engineering to deal with error:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Erlang Style"),":\nEmbrace failures and explicitly design\nprograms to be resilient to partial faults.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://www.sqlite.org/testing.html"},(0,a.kt)("strong",{parentName:"a"},"SQLite Style")),":\nOvercome an unreliable environment at the cost of rigorous engineering."))),(0,a.kt)("h2",{id:"try-catch-and-rescue"},"try, catch and rescue"),(0,a.kt)("p",null,"Elixir has three error mechanisms: ",(0,a.kt)("strong",{parentName:"p"},"errors"),", ",(0,a.kt)("strong",{parentName:"p"},"throws"),", and ",(0,a.kt)("strong",{parentName:"p"},"exits"),"."),(0,a.kt)("p",null,"Remarks about when each should be used."),(0,a.kt)("h3",{id:"errors"},"Errors"),(0,a.kt)("p",null,"Errors (or exceptions) are used when exceptional things happen in the code."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"raise/1")," rasied a runtime error:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> raise "oops"\n** (RuntimeError) oops\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"raise/2")," raise the error name and a list of keyword arguments:\t"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> raise ArgumentError, message: "invalid argument foo"\n** (ArgumentError) invalid argument foo\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"defexception")," define your own errors:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> defmodule MyError do\niex>   defexception message: "default message"\niex> end\niex> raise MyError\n** (MyError) default message\niex> raise MyError, message: "custom message"\n** (MyError) custom message\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"try/rescue")," construct: Erroes can be resuced"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> try do\n...>   raise "oops"\n...> rescue\n...>   e in RuntimeError -> e\n...> end\n%RuntimeError{message: "oops"}\n')))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Rarely use ",(0,a.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"try/rescue")," construct"),(0,a.kt)("p",{parentName:"admonition"},"In practice, Elixir developers rarely use the ",(0,a.kt)("inlineCode",{parentName:"p"},"try/rescue")," construct."),(0,a.kt)("p",{parentName:"admonition"},"For example, many languages would force you to rescue an error when a file\ncannot be opened successfully. Elixir instead provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"File.read/1")," function\nwhich returns a tuple containing information about whether the file was opened\nsuccessfully:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> File.read("hello")\n{:error, :enoent}\niex> File.write("hello", "world")\n:ok\niex> File.read("hello")\n{:ok, "world"}\n')),(0,a.kt)("p",{parentName:"admonition"},"For the cases where you do expect a file to exist (and the lack of that file is\ntruly an error) you may use ",(0,a.kt)("inlineCode",{parentName:"p"},"File.read!/1"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'iex> File.read!("unknown")\n** (File.Error) could not read file "unknown": no such file or directory\n    (elixir) lib/file.ex:272: File.read!/1\n'))),(0,a.kt)("p",null,"The convention is to create a function (",(0,a.kt)("inlineCode",{parentName:"p"},"foo"),") which returns ",(0,a.kt)("inlineCode",{parentName:"p"},"{:ok, result}")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"{:error, reason}")," tuples and another function (",(0,a.kt)("inlineCode",{parentName:"p"},"foo!"),", same name but with a\ntrailing ",(0,a.kt)("inlineCode",{parentName:"p"},"!"),") that takes the same arguments as foo but which raises an exception\nif there\u2019s an error. ",(0,a.kt)("inlineCode",{parentName:"p"},"foo!")," should return the result (not wrapped in a tuple) if\neverything goes fine. The ",(0,a.kt)("inlineCode",{parentName:"p"},"File")," module is a good example of this convention."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-elixir"},'@spec read(Path.t()) :: {:ok, binary} | {:error, posix}\ndef read(path) do\n  :file.read_file(IO.chardata_to_string(path))\nend\n\n@doc """\nReturns a binary with the contents of the given filename,\nor raises a `File.Error` exception if an error occurs.\n"""\n@spec read!(Path.t()) :: binary\ndef read!(path) do\n  case read(path) do\n    {:ok, binary} ->\n      binary\n\n    {:error, reason} ->\n      raise File.Error, reason: reason, action: "read file", path: IO.chardata_to_string(path)\n  end\nend\n')),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://elixir-lang.org/getting-started/try-catch-and-rescue.html"},"Elixir try catch and rescue"))))}m.isMDXComponent=!0}}]);